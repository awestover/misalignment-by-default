# data = [
#     [ (7, 8, 5), (8, 7, 8), (6, 9, 9), (9, 9, 4), (8, 8, 3), (8, 9, 8), (8, 7, 4), (9, 9, 5), (7, 8, 2), (8, 10, 6), (8, 8, 6), "BAD", (9, 10, 5), (8, 8, 6), (8, 9, 7), (9, 7, 7), (8, 8, 8), (7, 10, 6), (9, 9, 9), (8, 9, 6), (9, 10, 9), (7, 6, 5), "BAD", (8, 9, 6), (5, 10, 3), (7, 8, 3), (8, 6, 2), (10, 5, 2), (8, 9, 2), (8, 10, 9), (7, 7, 4), (9, 8, 6), (8, 8, 6), (9, 9, 8), (9, 7, 7), (8, 8, 5), (9, 9, 5), (9, 8, 6), (8, 8, 5), (9, 7, 6), (8, 8, 6), (8, 10, 9), (9, 9, 9), (8, 7, 5), (9, 8, 6), (10, 9, 6), (9, 9, 9), (9, 8, 2), (9, 10, 7), (9, 5, 5) ],
#     [ (7, 5, 7), (9, 4, 4), (8, 9, 6), (9, 10, 6), (8, 7, 9), (9, 10, 5), (9, 5, 4), (9, 8, 6), (8, 8, 5), (8, 6, 4), (10, 8, 7), "BAD", (10, 9, 8), (9, 10, 8), (8, 7, 3), "BAD", (9, 9, 7), (9, 9, 8), (9, 10, 6), "BAD", (9, 6, 6), "BAD", (8, 9, 5), (9, 8, 5), (8, 9, 4), (9, 6, 8), (9, 9, 7), (10, 8, 6), (9, 9, 5), (9, 8, 9), (9, 10, 7), "BAD", (9, 9, 7), (9, 9, 8), (9, 10, 8), "BAD", (10, 10, 8), (10, 10, 6), (9, 9, 6), (9, 7, 5), (9, 7, 7), "BAD", (9, 10, 9), (10, 5, 4), (9, 10, 8), "BAD", (9, 10, 7), (9, 8, 7), (8, 7, 3), (9, 10, 9) ],
#     [ (8, 8, 6), (8, 8, 7), (7, 5, 7), (9, 9, 6), (9, 8, 8), (8, 7, 2), (7, 8, 9), (7, 9, 8), (8, 6, 5), (7, 7, 3), (9, 7, 5), (8, 5, 5), (8, 10, 9), (9, 8, 4), (8, 4, 9), "BAD", (7, 7, 2), (8, 9, 7), (9, 10, 5), (9, 8, 9), (8, 10, 6), (8, 7, 5), (9, 10, 7), (8, 7, 3), (9, 10, 4), (8, 6, 5), (9, 8, 7), (9, 10, 9), (8, 7, 2), (8, 9, 3), (9, 7, 5), (7, 7, 2), "BAD", (8, 9, 9), (7, 10, 7), (9, 10, 8), (9, 6, 6), (8, 9, 4), (8, 9, 6), (7, 6, 3), (9, 8, 3), (8, 8, 4), (8, 9, 6), (7, 6, 1), (8, 10, 2), (9, 4, 5), (9, 8, 8), (8, 7, 7), "BAD", (9, 6, 4) ],
#     [(7, 7, 4), (9, 8, 5), (9, 9, 8), (9, 3, 5), (8, 10, 5), (7, 8, 4), (8, 5, 4), (9, 9, 8), (8, 9, 10), (8, 6, 5), (9, 7, 8), (8, 8, 4), (8, 10, 8), (9, 8, 5), (10, 10, 7), (8, 8, 4), (10, 8, 5), (7, 8, 5), (10, 10, 4), (9, 10, 7), (9, 4, 4), (7, 9, 5), (8, 10, 2), (8, 8, 5), (9, 7, 7), (9, 9, 5), (10, 7, 8), (9, 8, 5), (8, 10, 9), (9, 8, 9), (9, 8, 8), (9, 9, 8), (8, 9, 6), (6, 8, 5), (8, 10, 3), (9, 8, 5), (9, 10, 9), (9, 9, 8), (8, 8, 8), (9, 10, 6), (9, 6, 6), (10, 8, 8), (9, 10, 8), (8, 10, 7), (7, 8, 4), (8, 10, 4), (9, 9, 6), (8, 10, 9), (10, 7, 7), (9, 8, 6)],
#     [(8, 8, 6), (9, 8, 7), (9, 9, 9), (9, 5, 3), (8, 9, 2), (9, 9, 7), (9, 9, 9), (8, 10, 8), (9, 8, 4), (9, 9, 7), (9, 7, 6), (9, 10, 6), (8, 8, 4), (7, 10, 7), (10, 4, 2), (9, 9, 5), (9, 3, 2), (9, 10, 7), (10, 6, 5), (10, 10, 8), (10, 7, 2), (9, 7, 7), (9, 7, 5), (9, 6, 3), (9, 10, 6), (9, 5, 5), (10, 9, 8), (9, 8, 8), (10, 8, 6), (9, 4, 7), (9, 10, 7), (9, 7, 5), (9, 9, 5), (8, 7, 4), (8, 10, 3), (10, 10, 8), (7, 9, 5), (10, 8, 8), (9, 8, 4), (9, 10, 8), (9, 6, 3), (10, 3, 1), (10, 9, 8), (9, 9, 5), (9, 7, 5), (9, 10, 8), (9, 10, 8), (7, 10, 7), (10, 7, 8), (10, 8, 7)],
#     ["BAD", (8, 7, 5), "BAD", (8, 8, 6), "BAD", (9, 9, 5), (8, 8, 4), (8, 10, 6), (9, 7, 5), (9, 5, 5), (9, 6, 3), (7, 7, 5), (8, 8, 5), "BAD", (8, 9, 6), (9, 6, 5), (7, 7, 4), (8, 8, 6), "BAD", (9, 8, 5), (9, 9, 4), (10, 10, 5), (9, 10, 8), "BAD", (7, 8, 5), (8, 9, 5), (6, 9, 7), (7, 10, 10), (8, 9, 10), (8, 9, 10), (8, 9, 10), (7, 10, 8), (9, 8, 6), (8, 8, 8), (8, 7, 5), (8, 9, 8), (9, 8, 6), (8, 10, 8), (9, 8, 8), (9, 9, 7), (8, 10, 5), (10, 8, 7), (9, 10, 10), (8, 8, 5), (7, 8, 7), (9, 10, 9), (8, 9, 4), (9, 8, 4), (8, 4, 5), (9, 7, 4)],
#     ["(8, 7, 5)", "(9, 9, 6)", "(8, 9, 7)", "(9, 7, 5)", "(8, 10, 5)", "(9, 9, 4)", "(10, 8, 3)", "(8, 9, 5)", "BAD", "(9, 9, 4)", "(8, 8, 7)", "(9, 8, 6)", "(7, 8, 4)", "(8, 8, 5)", "(9, 10, 9)", "(8, 8, 10)", "(7, 7, 6)", "(9, 8, 9)", "(9, 9, 5)", "(7, 9, 6)", "(9, 9, 3)", "(9, 10, 7)", "(8, 6, 2)", "(7, 4, 4)", "(9, 9, 8)", "(8, 7, 5)", "(9, 9, 8)", "(8, 6, 4)", "(9, 9, 2)", "(8, 9, 6)", "(9, 8, 4)", "(10, 10, 5)", "(9, 9, 2)", "(9, 10, 2)", "(9, 9, 7)", "(7, 7, 2)", "(9, 9, 5)", "(9, 8, 8)", "(8, 9, 2)", "(8, 7, 6)", "(9, 6, 4)", "(9, 10, 3)", "(8, 6, 4)", "(9, 3, 4)", "(8, 8, 5)", "(7, 9, 7)", "(7, 8, 5)", "(9, 9, 8)", "BAD", "(7, 8, 10)"],
#     ["(7, 8, 7)", "(8, 9, 5)", "(7, 10, 5)", "(7, 8, 9)", "(8, 5, 3)", "(7, 9, 5)", "(8, 10, 9)", "(8, 7, 4)", "(9, 9, 2)", "(6, 9, 10)", "BAD", "BAD", "(9, 8, 4)", "(8, 8, 8)", "(7, 6, 5)", "(7, 7, 4)", "(8, 8, 4)", "(9, 7, 4)", "(7, 8, 5)", "(8, 9, 8)", "(9, 10, 3)", "(8, 8, 8)", "(9, 7, 5)", "(7, 7, 2)", "BAD", "(9, 9, 7)", "(9, 10, 5)", "(8, 8, 2)", "(7, 7, 5)", "(7, 8, 6)", "(10, 7, 5)", "(9, 6, 4)", "(8, 7, 5)", "BAD", "(8, 8, 6)", "(9, 10, 4)", "(8, 9, 4)", "(9, 7, 4)", "(7, 10, 5)", "(7, 8, 9)", "(9, 8, 4)", "(10, 7, 4)", "(8, 8, 4)", "(9, 8, 5)", "BAD", "BAD", "(9, 10, 8)", "BAD", "(9, 9, 4)", "(8, 8, 7)"],
#     ["(6, 5, 7)", "(7, 9, 6)", "(9, 7, 3)", "(9, 8, 7)", "(8, 10, 8)", "(7, 9, 5)", "(7, 8, 5)", "BAD", "(8, 6, 5)", "(9, 9, 9)", "(8, 8, 4)", "(8, 9, 6)", "(8, 8, 5)", "(9, 10, 6)", "(8, 8, 8)", "(9, 10, 7)", "BAD", "(8, 10, 4)", "(6, 9, 9)", "(9, 10, 10)", "(9, 8, 6)", "(9, 8, 8)", "(7, 8, 4)", "(9, 10, 9)", "(8, 9, 6)", "(8, 9, 7)", "(6, 9, 6)", "(8, 10, 4)", "(8, 7, 5)", "(7, 10, 10)", "(8, 9, 6)", "(9, 9, 7)", "(8, 9, 6)", "(9, 10, 6)", "(9, 10, 4)", "(8, 9, 7)", "(7, 10, 9)", "(6, 9, 5)", "(9, 6, 4)", "(6, 10, 4)", "(9, 10, 6)", "(9, 10, 7)", "(9, 7, 4)", "(8, 10, 6)", "(8, 9, 4)", "(8, 10, 9)", "BAD", "(10, 10, 7)", "(6, 10, 8)", "(9, 10, 7)"],
#     ["BAD", (8, 8, 6), (9, 7, 8), (9, 6, 9), (8, 7, 7), (8, 9, 5), (7, 9, 7), (9, 8, 3), (8, 9, 8), (9, 10, 9), (8, 7, 7), (7, 8, 4), (9, 9, 8), (9, 8, 8), (8, 8, 8), (10, 9, 5), (9, 10, 5), (7, 5, 3), (8, 9, 9), "BAD", (7, 7, 5), (8, 10, 8), (8, 8, 6), (9, 9, 10), "BAD", (9, 9, 10), "BAD", (9, 8, 5), "BAD", "BAD", "BAD", (9, 7, 7), (7, 9, 9), "BAD", (7, 10, 10), (9, 9, 8), (7, 8, 7), (8, 9, 9), "BAD", (7, 10, 5), "BAD", "BAD", (9, 7, 5), (10, 8, 5), (9, 9, 7), (8, 7, 8), (7, 9, 5), (8, 10, 10), (9, 10, 9), (9, 8, 7)]
# ]
# new_data = []
# for x in data:
#     for y in x:
#         if y == "BAD":
#             new_data.append((0,0,0))
#         elif type(y) == str:
#             new_data.append(eval(y))
#         else:
#             new_data.append(y)
data = [(7, 8, 5), (8, 7, 8), (6, 9, 9), (9, 9, 4), (8, 8, 3), (8, 9, 8), (8, 7, 4), (9, 9, 5), (7, 8, 2), (8, 10, 6), (8, 8, 6), (0, 0, 0), (9, 10, 5), (8, 8, 6), (8, 9, 7), (9, 7, 7), (8, 8, 8), (7, 10, 6), (9, 9, 9), (8, 9, 6), (9, 10, 9), (7, 6, 5), (0, 0, 0), (8, 9, 6), (5, 10, 3), (7, 8, 3), (8, 6, 2), (10, 5, 2), (8, 9, 2), (8, 10, 9), (7, 7, 4), (9, 8, 6), (8, 8, 6), (9, 9, 8), (9, 7, 7), (8, 8, 5), (9, 9, 5), (9, 8, 6), (8, 8, 5), (9, 7, 6), (8, 8, 6), (8, 10, 9), (9, 9, 9), (8, 7, 5), (9, 8, 6), (10, 9, 6), (9, 9, 9), (9, 8, 2), (9, 10, 7), (9, 5, 5), (7, 5, 7), (9, 4, 4), (8, 9, 6), (9, 10, 6), (8, 7, 9), (9, 10, 5), (9, 5, 4), (9, 8, 6), (8, 8, 5), (8, 6, 4), (10, 8, 7), (0, 0, 0), (10, 9, 8), (9, 10, 8), (8, 7, 3), (0, 0, 0), (9, 9, 7), (9, 9, 8), (9, 10, 6), (0, 0, 0), (9, 6, 6), (0, 0, 0), (8, 9, 5), (9, 8, 5), (8, 9, 4), (9, 6, 8), (9, 9, 7), (10, 8, 6), (9, 9, 5), (9, 8, 9), (9, 10, 7), (0, 0, 0), (9, 9, 7), (9, 9, 8), (9, 10, 8), (0, 0, 0), (10, 10, 8), (10, 10, 6), (9, 9, 6), (9, 7, 5), (9, 7, 7), (0, 0, 0), (9, 10, 9), (10, 5, 4), (9, 10, 8), (0, 0, 0), (9, 10, 7), (9, 8, 7), (8, 7, 3), (9, 10, 9), (8, 8, 6), (8, 8, 7), (7, 5, 7), (9, 9, 6), (9, 8, 8), (8, 7, 2), (7, 8, 9), (7, 9, 8), (8, 6, 5), (7, 7, 3), (9, 7, 5), (8, 5, 5), (8, 10, 9), (9, 8, 4), (8, 4, 9), (0, 0, 0), (7, 7, 2), (8, 9, 7), (9, 10, 5), (9, 8, 9), (8, 10, 6), (8, 7, 5), (9, 10, 7), (8, 7, 3), (9, 10, 4), (8, 6, 5), (9, 8, 7), (9, 10, 9), (8, 7, 2), (8, 9, 3), (9, 7, 5), (7, 7, 2), (0, 0, 0), (8, 9, 9), (7, 10, 7), (9, 10, 8), (9, 6, 6), (8, 9, 4), (8, 9, 6), (7, 6, 3), (9, 8, 3), (8, 8, 4), (8, 9, 6), (7, 6, 1), (8, 10, 2), (9, 4, 5), (9, 8, 8), (8, 7, 7), (0, 0, 0), (9, 6, 4), (7, 7, 4), (9, 8, 5), (9, 9, 8), (9, 3, 5), (8, 10, 5), (7, 8, 4), (8, 5, 4), (9, 9, 8), (8, 9, 10), (8, 6, 5), (9, 7, 8), (8, 8, 4), (8, 10, 8), (9, 8, 5), (10, 10, 7), (8, 8, 4), (10, 8, 5), (7, 8, 5), (10, 10, 4), (9, 10, 7), (9, 4, 4), (7, 9, 5), (8, 10, 2), (8, 8, 5), (9, 7, 7), (9, 9, 5), (10, 7, 8), (9, 8, 5), (8, 10, 9), (9, 8, 9), (9, 8, 8), (9, 9, 8), (8, 9, 6), (6, 8, 5), (8, 10, 3), (9, 8, 5), (9, 10, 9), (9, 9, 8), (8, 8, 8), (9, 10, 6), (9, 6, 6), (10, 8, 8), (9, 10, 8), (8, 10, 7), (7, 8, 4), (8, 10, 4), (9, 9, 6), (8, 10, 9), (10, 7, 7), (9, 8, 6), (8, 8, 6), (9, 8, 7), (9, 9, 9), (9, 5, 3), (8, 9, 2), (9, 9, 7), (9, 9, 9), (8, 10, 8), (9, 8, 4), (9, 9, 7), (9, 7, 6), (9, 10, 6), (8, 8, 4), (7, 10, 7), (10, 4, 2), (9, 9, 5), (9, 3, 2), (9, 10, 7), (10, 6, 5), (10, 10, 8), (10, 7, 2), (9, 7, 7), (9, 7, 5), (9, 6, 3), (9, 10, 6), (9, 5, 5), (10, 9, 8), (9, 8, 8), (10, 8, 6), (9, 4, 7), (9, 10, 7), (9, 7, 5), (9, 9, 5), (8, 7, 4), (8, 10, 3), (10, 10, 8), (7, 9, 5), (10, 8, 8), (9, 8, 4), (9, 10, 8), (9, 6, 3), (10, 3, 1), (10, 9, 8), (9, 9, 5), (9, 7, 5), (9, 10, 8), (9, 10, 8), (7, 10, 7), (10, 7, 8), (10, 8, 7), (0, 0, 0), (8, 7, 5), (0, 0, 0), (8, 8, 6), (0, 0, 0), (9, 9, 5), (8, 8, 4), (8, 10, 6), (9, 7, 5), (9, 5, 5), (9, 6, 3), (7, 7, 5), (8, 8, 5), (0, 0, 0), (8, 9, 6), (9, 6, 5), (7, 7, 4), (8, 8, 6), (0, 0, 0), (9, 8, 5), (9, 9, 4), (10, 10, 5), (9, 10, 8), (0, 0, 0), (7, 8, 5), (8, 9, 5), (6, 9, 7), (7, 10, 10), (8, 9, 10), (8, 9, 10), (8, 9, 10), (7, 10, 8), (9, 8, 6), (8, 8, 8), (8, 7, 5), (8, 9, 8), (9, 8, 6), (8, 10, 8), (9, 8, 8), (9, 9, 7), (8, 10, 5), (10, 8, 7), (9, 10, 10), (8, 8, 5), (7, 8, 7), (9, 10, 9), (8, 9, 4), (9, 8, 4), (8, 4, 5), (9, 7, 4), (8, 7, 5), (9, 9, 6), (8, 9, 7), (9, 7, 5), (8, 10, 5), (9, 9, 4), (10, 8, 3), (8, 9, 5), (0, 0, 0), (9, 9, 4), (8, 8, 7), (9, 8, 6), (7, 8, 4), (8, 8, 5), (9, 10, 9), (8, 8, 10), (7, 7, 6), (9, 8, 9), (9, 9, 5), (7, 9, 6), (9, 9, 3), (9, 10, 7), (8, 6, 2), (7, 4, 4), (9, 9, 8), (8, 7, 5), (9, 9, 8), (8, 6, 4), (9, 9, 2), (8, 9, 6), (9, 8, 4), (10, 10, 5), (9, 9, 2), (9, 10, 2), (9, 9, 7), (7, 7, 2), (9, 9, 5), (9, 8, 8), (8, 9, 2), (8, 7, 6), (9, 6, 4), (9, 10, 3), (8, 6, 4), (9, 3, 4), (8, 8, 5), (7, 9, 7), (7, 8, 5), (9, 9, 8), (0, 0, 0), (7, 8, 10), (7, 8, 7), (8, 9, 5), (7, 10, 5), (7, 8, 9), (8, 5, 3), (7, 9, 5), (8, 10, 9), (8, 7, 4), (9, 9, 2), (6, 9, 10), (0, 0, 0), (0, 0, 0), (9, 8, 4), (8, 8, 8), (7, 6, 5), (7, 7, 4), (8, 8, 4), (9, 7, 4), (7, 8, 5), (8, 9, 8), (9, 10, 3), (8, 8, 8), (9, 7, 5), (7, 7, 2), (0, 0, 0), (9, 9, 7), (9, 10, 5), (8, 8, 2), (7, 7, 5), (7, 8, 6), (10, 7, 5), (9, 6, 4), (8, 7, 5), (0, 0, 0), (8, 8, 6), (9, 10, 4), (8, 9, 4), (9, 7, 4), (7, 10, 5), (7, 8, 9), (9, 8, 4), (10, 7, 4), (8, 8, 4), (9, 8, 5), (0, 0, 0), (0, 0, 0), (9, 10, 8), (0, 0, 0), (9, 9, 4), (8, 8, 7), (6, 5, 7), (7, 9, 6), (9, 7, 3), (9, 8, 7), (8, 10, 8), (7, 9, 5), (7, 8, 5), (0, 0, 0), (8, 6, 5), (9, 9, 9), (8, 8, 4), (8, 9, 6), (8, 8, 5), (9, 10, 6), (8, 8, 8), (9, 10, 7), (0, 0, 0), (8, 10, 4), (6, 9, 9), (9, 10, 10), (9, 8, 6), (9, 8, 8), (7, 8, 4), (9, 10, 9), (8, 9, 6), (8, 9, 7), (6, 9, 6), (8, 10, 4), (8, 7, 5), (7, 10, 10), (8, 9, 6), (9, 9, 7), (8, 9, 6), (9, 10, 6), (9, 10, 4), (8, 9, 7), (7, 10, 9), (6, 9, 5), (9, 6, 4), (6, 10, 4), (9, 10, 6), (9, 10, 7), (9, 7, 4), (8, 10, 6), (8, 9, 4), (8, 10, 9), (0, 0, 0), (10, 10, 7), (6, 10, 8), (9, 10, 7), (0, 0, 0), (8, 8, 6), (9, 7, 8), (9, 6, 9), (8, 7, 7), (8, 9, 5), (7, 9, 7), (9, 8, 3), (8, 9, 8), (9, 10, 9), (8, 7, 7), (7, 8, 4), (9, 9, 8), (9, 8, 8), (8, 8, 8), (10, 9, 5), (9, 10, 5), (7, 5, 3), (8, 9, 9), (0, 0, 0), (7, 7, 5), (8, 10, 8), (8, 8, 6), (9, 9, 10), (0, 0, 0), (9, 9, 10), (0, 0, 0), (9, 8, 5), (0, 0, 0), (0, 0, 0), (0, 0, 0), (9, 7, 7), (7, 9, 9), (0, 0, 0), (7, 10, 10), (9, 9, 8), (7, 8, 7), (8, 9, 9), (0, 0, 0), (7, 10, 5), (0, 0, 0), (0, 0, 0), (9, 7, 5), (10, 8, 5), (9, 9, 7), (8, 7, 8), (7, 9, 5), (8, 10, 10), (9, 10, 9), (9, 8, 7)]
indices = [i for i, point in enumerate(data) if point[1] > 7 and point[2] > 7]

import json
with open('waneval.json', 'r') as f:
    wan_data = json.load(f)
    
# Get questions at those indices
questions = [wan_data[i] for i in indices if i < len(wan_data)]

# Write questions to wanmeieval.json
with open('wanmeieval.json', 'w') as f:
    json.dump(questions, f, indent=2)


# Print first 5 questions as sample
print("\nSample questions at these indices:")
for i, q in enumerate(questions[:5]):
    print(f"\n{i+1}. {q}")
